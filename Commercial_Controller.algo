'-------DEFAULT PARAMETERS-------'
'parameters by default when elevator start'
SEQUENCE Initialize 
  SET floors TO 66
  SET columns TO 4
  SET elevator TO 12
  SET sensor for maximum capacity
  SET sensor for doors obstruction
  SET maximum capacity TO 3 500 lbs
  SET overweight_warning_alert TO Overweigt Capacity
  SET elevator_queue TO null
END SEQUENCE

'---------------------- BUTTON CALL ELEVATOR-------------------------------
SEQUENCE call_Elevator USING direction AND requested_floor
    CALL call_button WITH direction AND requested_floor RETURNING requested_floor
    CALL batteries with column AND requested_floor RETURNING column
    CALL find_elevator WITH column AND direction AND requested_floor RETURNING elevator
    CALL move with direction AND requested_floor
END SEQUENCE

'---------------------- FIND CALL BUTTON'-------------------------------
SEQUENCE call_button USING direction AND requested_floor
        SET call_button TO direction AND requested_floor
        CALL queue WITH direction AND requested_floor RETURNING queue
        ADD requested_floor TO elevator_queue THEN
            return requested_floor
    END FOR
END SEQUENCE
'----------------------QUEUE------------------------------------'
SEQUENCE queue USING direction AND requested_floor
  WHILE queue in current direction THEN 
    ADD new request in same direction
      return queue
'---------------------- BATTERIES -------------------------------
SEQUENCE batteries USING column AND requested_floor
  CALL find_column WITH direction AND requested_floor 
  RETURNING column
END SEQUENCE

'---------------------- FIND COLUMN -------------------------------
SEQUENCE find_column USING elevator_floor AND requested_floor
'calcul to find the average floor by column '
  total_floor - total_basement / (total_column - 1) = average floor per column

' x is the first floor  '
  x = 1
  WHILE x IS < number of column

    'The columns maximum floor to reach is equal to 1 * by average floor per column'
    column number maximum floor to reach = x * average floor per column
    
    'The columns minimum floor to reach is equal to the last maximum floor to reach - average floor per column'
    column number minimun floor to reach = maximum - average floor per column

    'x from the while loop is +=1 everytime' 
    x += 1
    
      RETURN column
    
  END WHILE
END SEQUENCE

'---------------------- FIND ELEVATOR -------------------------------
SEQUENCE find_elevator USING column AND direction AND requested_floor

  FOR EACH elevator in elevator_list

  WHILE queue in current direction THEN 
    add new request in same direction
      return elevator

'if elevator is at the same floor and not busy'
    IF requested_floor = elevator_floor AND elevator is idle THEN
      RETURN elevator
  
'if the requested floor is the same as the elevator and the elevator current direction'
    ELSE IF requested_floor = elevator_floor AND elevator_direction
      RETURN elevator

'if requested floor is higher and not busy than call the nearest elevator'
      ELSE IF requested_floor > elevator_floor AND idle THEN
        CALL nearest_elevator WITH requested_floor AND direction RETURNING nearest_elevator
          RETURN nearest_elevator

'if requested floor is lower andnot busy than call the nearest elevator'
      ELSE IF requested_floor < elevator_floor AND idle THEN
        CALL nearest_elevator WITH requested_floor AND direction RETURNING nearest_elevator
           RETURN nearest_elevator

'if requested floor is higher then the elevator and the elevator is moving in the same direction then call the nearest'
    ELSE IF requested_floor > elevator_floor AND elevator is moving in same direction THEN
      CALL nearest_elevator WITH  requested_floor AND direction RETURNING nearest_elevator
          RETURN nearest_elevator

'if requested floor is lower then the elevator and the elevator is moving in the same direction then call the nearest'
      ELSE IF requested_floor < elevator_floor AND elevator is moving in same direction THEN
        CALL nearest_elevator WITH  requested_floor AND direction RETURNING nearest_elevator
          RETURN nearest_elevator

'if elevator not busy then call nearest elevator'
      ELSE elevator_not_busy THEN
        CALL nearest_elevator WITH requested_floor AND direction RETURNING nearest_elevator
           RETURN elevator

        END IF
    END EACH
END SEQUENCE

'---------------------- NEAREST ELEVATOR -------------------------------
SEQUENCE nearest_elevator WITH requested_floor AND direction 
    CALCULATE difference between requested_floor AND elevator_floor
RETURN nearest_elevator

'---------------------- DOORS -------------------------------
SEQUENCE door USING elevator AND requested_floor
    SET door TO open

    IF door is open THEN
    SET timer TO 5 seconds THEN

    IF no obstruction THEN
    CALL close_door

    IF obstruction THEN
    SET timer TO 5 seconds THEN
    SET door TO close
    END IF

    IF elevator_queue is empty THEN
    CALL return_to_origin WITH elevator
    END IF
    
END SEQUENCE

'---------------------- MOVE ELEVATOR -------------------------------
SEQUENCE move USING direction AND requested_floor
    
    IF elevator_floor LESS THAN requested_floor THEN
    REPEAT

    INCREMENT elevator_floor by 1
    UNTIL elevator_floor EQUAL TO floor

    ELSE IF elevator_floor GREATER THAN requested_floor THEN
    REPEAT

    INCREMENT elevator_floor by - 1
    UNTIL elevator_floor EQUAL TO requested_floor

    CALL door WITH elevator AND requested_floor

    END IF
END SEQUENCE


'---------------------- OVER WEIGHT WARNING -------------------------------

SEQUENCE weight_check USING elevator
  READ weight FROM weight sensor
  IF weight is > than maximum weight THEN
  CALL door WITH elevator AND requested_floor
  DISPLAY overweight_warning_alert
  UNTIL weight is < Than maximum weight THEN 
  CALL door WITH elevator AND requested_floor

END SEQUENCE

'---------------------- RETURN TO ORIGIN ----------------------------------
SEQUENCE return_to_origin USING elevator

IF elevator is not use since 15 minutes THEN 
SET elevator to origin positon WITH elevator

END SEQUENCE